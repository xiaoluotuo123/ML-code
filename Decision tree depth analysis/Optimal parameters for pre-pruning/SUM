import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split, GridSearchCV

# 读取数据
data = pd.read_excel(r"D:桌面/shujukuE.xlsx", sheet_name="Sheet3all", index_col=0)
print(data)

# 提取特征和目标变量
X_discrete = data.loc[1:1482, ['metal number', 'metal valence', 'metal proportion', 's orbital of metal element',
                               'p orbital of metal element', 'd orbital of metal element', 'f orbital of metal element',
                               'nonmetal number', 'nonmetal valence', 'nonmetal proportion', 'p orbital of nonmetal element',
                               'shape', 'concentration', 'size', 'Gram staining', 'bacterial strain', 'response time',
                               'detection method']].astype(str).values
X_continuous = data.loc[1:1482, ['electronegativity of metal', 'predicted formation energy',
                                 'electronegativity of nonmetal', 'standard electrode potential', 'Fermi level',
                                 'bandgap', ]].values
Y = data.loc[1:1482, 'MIC'].values

# 合并离散变量和连续变量
X = pd.concat([pd.DataFrame(X_discrete), pd.DataFrame(X_continuous)], axis=1).values

# 划分训练集和测试集
train_x, test_x, train_y, test_y = train_test_split(X, Y, test_size=0.2, random_state=258)

# 设置参数候选值的范围
parameters = {
    'splitter': ['best'],
    'criterion': ['gini'],
    'max_depth': [5, 6, 7, 8, 9, 10],
    'min_samples_leaf': [1, 3, 5],
    'min_samples_split': [2, 4, 6]
}

# 创建决策树分类器
clf = DecisionTreeClassifier()

# 创建网格搜索对象
grid_search = GridSearchCV(clf, parameters)

# 在训练集上进行网格搜索
grid_search.fit(train_x, train_y)

# 输出最佳参数和最佳得分
print("最佳参数：", grid_search.best_params_)
print("最佳得分：", grid_search.best_score_)

# 在测试集上评估模型性能
best_model = grid_search.best_estimator_
y_pred_test = best_model.predict(test_x)
test_accuracy = accuracy_score(test_y, y_pred_test)
print("测试集准确率：", test_accuracy)
