import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict
import numpy as np
# 读取数据
data = pd.read_excel(r"D:桌面/shujukuE.xlsx", sheet_name="metal1", index_col=0)
print(data)

# 提取特征和目标变量
X_discrete = data.loc[1:661, ['d orbital of metal element', 'shape', 'concentration', 'size',
                              'Gram staining', 'bacterial strain', 'response time', 'detection method']].astype(str).values
X_continuous = data.loc[1:661, ['electronegativity of metal', 'predicted formation energy',
                                 'Fermi level']].values
Y = data.loc[1:661, 'MIC'].values


# 合并离散变量和连续变量
X = pd.concat([pd.DataFrame(X_discrete), pd.DataFrame(X_continuous)], axis=1).values

# 划分训练集和测试集
train_x, test_x, train_y, test_y = train_test_split(X, Y, test_size=0.2, random_state=258)

# 设置参数候选值的范围
parameters = {
    'splitter': ['best'],
    'criterion': ['gini'],
    'max_depth': [5],
    'min_samples_leaf': [1],
    'min_samples_split': [2]
}

# 创建决策树分类器
clf = DecisionTreeClassifier()

# 3. 模型训练与预测
model = DecisionTreeClassifier()
model.fit(train_x, train_y)
y_pred_train = model.predict(train_x)
y_pred_test = model.predict(test_x)


# 预测数据结果
predict_y = model.predict(test_x)
# 预测训练集数据结果
train_predict_y = model.predict(train_x)

# 计算训练集和测试集的准确率（10倍交叉验证）
train_cv_scores = cross_val_score(model, train_x, train_y, cv=10)
test_cv_scores = cross_val_score(model, test_x, test_y, cv=10)
print("训练集准确率（10倍交叉验证）：", train_cv_scores.mean())
print("测试集准确率（10倍交叉验证）：", test_cv_scores.mean())

# 计算训练集和测试集的准确率（10倍交叉验证）的分类报告
train_cv_pred = cross_val_predict(model, train_x, train_y, cv=10)
test_cv_pred = cross_val_predict(model, test_x, test_y, cv=10)
train_classification_report = classification_report(train_y, train_cv_pred)
test_classification_report = classification_report(test_y, test_cv_pred)
print("训练集准确率（10倍交叉验证）的分类报告：")
print(train_classification_report)
print("测试集准确率（10倍交叉验证）的分类报告：")
print(test_classification_report)


# 对数据集进行10倍交叉验证并计算准确率和分类报告
cv_scores = cross_val_score(model, X, Y, cv=10)
print("交叉验证准确率：", cv_scores.mean())
y_pred_cv = cross_val_predict(model, X, Y, cv=10)
cv_classification_report = classification_report(Y, y_pred_cv)
print("交叉验证分类报告：")
print(cv_classification_report)
