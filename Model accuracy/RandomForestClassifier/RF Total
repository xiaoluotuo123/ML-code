from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV, train_test_split, cross_val_score, cross_val_predict
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import accuracy_score, classification_report
import pandas as pd

data = pd.read_excel(r"D:桌面/shujukuE.xlsx", sheet_name="SUM1", index_col=0)
print(data)

# 导入数据集
X = data.loc[1:1482, 'metal number':'detection method'].values
Y = data.loc[1:1482, 'MIC'].values

# 正则化处理
scaler = MinMaxScaler()
X_normalized = scaler.fit_transform(X)

# 先将数据划分为训练和测试样本
train_x, test_x, train_y, test_y = train_test_split(X_normalized, Y, test_size=0.2, random_state=258)

# 定义参数网格
param_grid = {
    'n_estimators': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 50],
    'max_depth': [None, 5, 6, 7, 8, 9, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

# 创建随机森林分类器
rf_model = RandomForestClassifier()

# 使用GridSearchCV进行参数搜索
grid_search = GridSearchCV(estimator=rf_model, param_grid=param_grid, cv=5, scoring='accuracy', n_jobs=-1)
grid_search.fit(train_x, train_y)

# 输出最佳参数
print("Best Parameters:", grid_search.best_params_)

# 使用最佳参数的模型进行训练和预测
best_rf_model = grid_search.best_estimator_
y_pred_train = best_rf_model.predict(train_x)
y_pred_test = best_rf_model.predict(test_x)

# 输出训练集和测试集的准确率
train_scores = cross_val_score(best_rf_model, train_x, train_y, cv=10)
test_scores = cross_val_score(best_rf_model, test_x, test_y, cv=10)
print("训练集准确率（10倍交叉验证）:", train_scores.mean())
print("测试集准确率（10倍交叉验证）:", test_scores.mean())
# 训练集和测试集的评估报告
train_pred = cross_val_predict(best_rf_model, train_x, train_y, cv=10)
test_pred = cross_val_predict(best_rf_model, test_x, test_y, cv=10)
print("训练集评估报告：\n", classification_report(train_y, train_pred))
print("测试集评估报告：\n", classification_report(test_y, test_pred))


# 10倍交叉验证并计算准确率
cv_scores = cross_val_score(best_rf_model, X_normalized, Y, cv=10)
mean_accuracy = cv_scores.mean()
print('整个数据集10倍交叉验证准确率为：%.2f%%' % (mean_accuracy * 100))
